#apiVersion: v1
#kind: Namespace
#metadata:
#  name: optimusdb
#---
apiVersion: v1
kind: ConfigMap
metadata:
  name: optimusdb-config
  namespace: swarm-system
data:
  OPTIMUSDB_API_PORT: "8089"
  OPTIMUSDB_P2P_PORT: "4001"
  OPTIMUSDB_GATEWAY_PORT: "5001"
  OPTIMUSDB_LOG_LEVEL: "info"
  # Optional: hard-code seed peers (uncomment & fill if needed)
  # OPTIMUSDB_SEED_PEERS: "optimusdb-0.optimusdb-headless.optimusdb.svc.cluster.local:4001,optimusdb-1.optimusdb-headless.optimusdb.svc.cluster.local:4001,optimusdb-2.optimusdb-headless.optimusdb.svc.cluster.local:4001"
---
# Headless service for stable pod DNS: optimusdb-0.optimusdb-headless.optimusdb.svc
apiVersion: v1
kind: Service
metadata:
  name: optimusdb-headless
  namespace: swarm-system
spec:
  clusterIP: None
  selector:
    app: optimusdb
  ports:
    - name: api
      port: 8089
      targetPort: 8089
    - name: p2p
      port: 4001
      targetPort: 4001
    - name: gateway
      port: 5001
      targetPort: 5001
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: optimusdb
  namespace: swarm-system
spec:
  serviceName: optimusdb-headless
  replicas: 3
  selector:
    matchLabels:
      app: optimusdb
  template:
    metadata:
      labels:
        app: optimusdb
    spec:
      containers:
        - name: optimusdb
          image: ghcr.io/georgegeorgakakos/optimusdb:latest
          #imagePullPolicy: IfNotPresent
          imagePullPolicy: Always
          ports:
            - name: api
              containerPort: 8089
            - name: p2p
              containerPort: 4001
            - name: gateway
              containerPort: 5001
          env:
            - name: POD_NAME
              valueFrom: { fieldRef: { fieldPath: metadata.name } }
            - name: POD_IP
              valueFrom: { fieldRef: { fieldPath: status.podIP } }
            - name: OPTIMUSDB_API_PORT
              valueFrom: { configMapKeyRef: { name: optimusdb-config, key: OPTIMUSDB_API_PORT } }
            - name: OPTIMUSDB_P2P_PORT
              valueFrom: { configMapKeyRef: { name: optimusdb-config, key: OPTIMUSDB_P2P_PORT } }
            - name: OPTIMUSDB_GATEWAY_PORT
              valueFrom: { configMapKeyRef: { name: optimusdb-config, key: OPTIMUSDB_GATEWAY_PORT } }
            - name: OPTIMUSDB_LOG_LEVEL
              valueFrom: { configMapKeyRef: { name: optimusdb-config, key: OPTIMUSDB_LOG_LEVEL } }
            # - name: OPTIMUSDB_SEED_PEERS
            #   valueFrom: { configMapKeyRef: { name: optimusdb-config, key: OPTIMUSDB_SEED_PEERS } }

          # Safer generic probes (TCP) in case /healthz isnâ€™t implemented
          readinessProbe:
            tcpSocket: { port: 8089 }
            initialDelaySeconds: 5
            periodSeconds: 10
          livenessProbe:
            tcpSocket: { port: 8089 }
            initialDelaySeconds: 15
            periodSeconds: 20

          volumeMounts:
            - name: data
              mountPath: /var/lib/optimusdb
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes: ["ReadWriteOnce"]
        storageClassName: local-path
        resources:
          requests:
            storage: 5Gi
---
# Per-pod Services to mimic your distinct host port mapping.
# Requires MetalLB (or another LB) to allocate external IPs.

apiVersion: v1
kind: Service
metadata:
  name: optimusdb-0
  namespace: swarm-system
spec:
  type: LoadBalancer
  externalTrafficPolicy: Cluster
  selector:
    statefulset.kubernetes.io/pod-name: optimusdb-0
  ports:
    - name: api
      port: 18001
      targetPort: 8089
      protocol: TCP
    - name: p2p
      port: 14001
      targetPort: 4001
      protocol: TCP
    - name: gateway
      port: 15001
      targetPort: 5001
      protocol: TCP
---
apiVersion: v1
kind: Service
metadata:
  name: optimusdb-1
  namespace: swarm-system
spec:
  type: LoadBalancer
  externalTrafficPolicy: Cluster
  selector:
    statefulset.kubernetes.io/pod-name: optimusdb-1
  ports:
    - name: api
      port: 18002
      targetPort: 8089
      protocol: TCP
    - name: p2p
      port: 14002
      targetPort: 4001
      protocol: TCP
    - name: gateway
      port: 15002
      targetPort: 5001
      protocol: TCP
---
apiVersion: v1
kind: Service
metadata:
  name: optimusdb-2
  namespace: swarm-system
spec:
  type: LoadBalancer
  externalTrafficPolicy: Cluster
  selector:
    statefulset.kubernetes.io/pod-name: optimusdb-2
  ports:
    - name: api
      port: 18003
      targetPort: 8089
      protocol: TCP
    - name: p2p
      port: 14003
      targetPort: 4001
      protocol: TCP
    - name: gateway
      port: 15003
      targetPort: 5001
      protocol: TCP
